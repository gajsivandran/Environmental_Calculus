main="f(x): Complex Smooth Piecewise Function")
lines(x2,y2,lwd=2,col="darkred")
lines(x3,y3,lwd=2,col="darkred")
abline(h=0,v=0,col="gray80")
# Open/closed markers for transitions
points(-1, -0.5*(-1+4)^2 + 1, pch=16, col="darkred")   # closed
points(-1, sin(1.5*(-1)) + 0.5*(-1), pch=1, col="darkred")  # open
points(1.5, sin(1.5*1.5) + 0.5*1.5, pch=16, col="darkred")  # closed
points(1.5, 0.1*(1.5-1.5)^3 - 0.4*(1.5-1.5)^2 + 2, pch=1, col="darkred") # open
x1 <- seq(-4,-1,length.out=100)
x2 <- seq(-1,1.5,length.out=100)
x3 <- seq(1.5,4,length.out=100)
y1 <- -0.5*(x1+4)^2 + 3                       # quadratic
y2 <- sin(1.5*x2) + 0.5*x2                    # sinusoidal-linear mix
y3 <- 0.1*(x3-1.5)^3 - 0.4*(x3-1.5)^2 + 2     # cubic section
plot(x1,y1,type="l",lwd=2,col="darkred",
xlim=c(-4,4),ylim=c(-2,3),
xlab="x",ylab="f(x)",
main="f(x): Complex Smooth Piecewise Function")
lines(x2,y2,lwd=2,col="darkred")
lines(x3,y3,lwd=2,col="darkred")
abline(h=0,v=0,col="gray80")
# Open/closed markers for transitions
points(-1, -0.5*(-1+4)^2 + 1, pch=16, col="darkred")   # closed
points(-1, sin(1.5*(-1)) + 0.5*(-1), pch=1, col="darkred")  # open
points(1.5, sin(1.5*1.5) + 0.5*1.5, pch=16, col="darkred")  # closed
points(1.5, 0.1*(1.5-1.5)^3 - 0.4*(1.5-1.5)^2 + 2, pch=1, col="darkred") # open
getwd()
setwd("C:/Users/gajs/OneDrive - UW/UW/Courses/QSci 291/Textbook_Project/bookdown-demo-main")
x <- seq(0, 4*pi, length.out=300)
y <- sin(x)
plot(x, y, type="l", lwd=2, col="seagreen",
main="f(x) = sin(x)",
xlab="x", ylab="f(x)")
abline(h=0, v=0, col="gray80")
source("_publish_calculus.R")
setwd("C:/Users/gajs/OneDrive - UW/UW/Courses/QSci 291/04_Fall_25/Tests")
# ---- Piecewise function demo matching the sketchy shape ----
# Features:
#  - gentle baseline
#  - left ramp, short plateau
#  - big smooth hill
#  - small dip
#  - taper back to baseline
# Edit breakpoints (b1..b6) and formulas to reshape.
library(ggplot2)
# Breakpoints for intervals  [b1,b2), [b2,b3), ...
b1 <- -8; b2 <- -5; b3 <- -2; b4 <- -1; b5 <-  3.5; b6 <- 5.5; b7 <- 9
# Baseline slope/intercept (slightly increasing baseline)
m_base <- 0.04
b_base <- 0.1
f_piece <- function(x){
# baseline
y <- m_base*x + b_base
# interval 1: (-Inf, b2) gentle curve upward
i1 <- x < b2
y[i1] <-  -0.15 + 0.015*(x[i1] - b1)^2  # small convex-up curve
# interval 2: [b2, b3) left ramp (linear rise)
i2 <- x >= b2 & x < b3
# make it meet interval 1 at b2
y_b2 <- -0.15 + 0.015*(b2 - b1)^2
slope2 <- 0.35
y[i2] <- y_b2 + slope2*(x[i2] - b2)
# interval 3: [b3, b4) short plateau (nearly flat)
i3 <- x >= b3 & x < b4
y[i3] <- 0.9
# interval 4: [b4, b5) big rounded hill (truncated parabola)
i4 <- x >= b4 & x < b5
c1 <- (b4 + b5)/2         # center of hill
w1 <- (b5 - b4)/2         # half-width
A1 <- 1.4                 # hill height
hill <- pmax(0, 1 - ((x[i4] - c1)/w1)^2)
y[i4] <- 1.0 + A1*hill    # sits above plateau
# interval 5: [b5, b6) small dip (inverted bump)
i5 <- x >= b5 & x < b6
c2 <- (b5 + b6)/2
w2 <- (b6 - b5)/2
A2 <- 0.45                # dip depth
dip <- pmax(0, 1 - ((x[i5] - c2)/w2)^2)
y[i5] <- 0.75 - A2*dip    # below local baseline
# interval 6: [b6, +Inf) taper back to baseline (gentle decline to flat)
i6 <- x >= b6
y_b6 <- 0.75 - A2*pmax(0, 1 - ((b6 - c2)/w2)^2) # value at b6
slope6 <- -0.05
y[i6] <- y_b6 + slope6*(x[i6] - b6) + 0.02*(x[i6] - b6)/(b7 - b6)
return(y)
}
# Create data and plot
xs <- seq(b1, b7, by = 0.01)
df <- data.frame(x = xs, y = f_piece(xs))
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, linewidth = 0.3) +
geom_vline(xintercept = 0, linewidth = 0.3) +
labs(title = "Piecewise Function (sketch-style)",
x = "x", y = "f(x)") +
theme_classic(base_size = 14)
# ------------------------------------------------------------
# Piecewise: 3 linear (flat, gentle up, steep up) -> gap -> 1-cycle sine ->
#            3 linear (steep down, moderate down, flat)
# Each linear segment is 1 unit wide; the gap is 1 unit wide.
# ------------------------------------------------------------
library(ggplot2)
library(dplyr)
# ---------- Parameters you may tweak ----------
x0        <- -6          # starting x for the first left segment
y0        <- 0.2         # starting y (baseline)
m_flat    <- 0.00        # left-1 slope (flat)
m_gentle  <- 0.40        # left-2 slope (gentle up)
m_steep   <- 1.20        # left-3 slope (steep up)
gap_w     <- 1.0         # width of the gap
sin_w     <- 4.0         # width (in x) for exactly ONE sine cycle (0..2π)
A         <- 1.0         # sine amplitude
vshift    <- 1.0         # vertical shift for the sine
# Right side slopes (reverse order): steep down, moderate down, flat
m_steep_dn <- -1.20
m_gentle_dn<- -0.40
m_flat_dn  <-  0.00
dx <- 0.01               # resolution for plotting
# ---------- Helper to build a straight segment 1 unit wide ----------
build_linear <- function(x_start, y_start, slope, dx = 0.01) {
xs <- seq(x_start, x_start + 1, by = dx)
ys <- y_start + slope * (xs - x_start)
tibble(x = xs, y = ys)
}
# ---------- Build LEFT: three 1-unit segments ----------
seg1 <- build_linear(x0,            y0,                   m_flat,   dx)
y1_end <- tail(seg1$y, 1)
seg2 <- build_linear(x0 + 1,        y1_end,               m_gentle, dx)
y2_end <- tail(seg2$y, 1)
seg3 <- build_linear(x0 + 2,        y2_end,               m_steep,  dx)
y3_end <- tail(seg3$y, 1)
# ---------- GAP: 1 unit wide with NA (no function defined) ----------
gap_x <- seq(x0 + 3, x0 + 3 + gap_w, by = dx)
gap   <- tibble(x = gap_x, y = NA_real_)
# ---------- SINE: exactly one cycle over sin_w ----------
# Map x in [x_sin_start, x_sin_end] to θ in [0, 2π]
x_sin_start <- x0 + 3 + gap_w
x_sin_end   <- x_sin_start + sin_w
xs_sin <- seq(x_sin_start, x_sin_end, by = dx)
theta  <- 2*pi * (xs_sin - x_sin_start) / sin_w
ys_sin <- vshift + A * sin(theta)
seg_sin <- tibble(x = xs_sin, y = ys_sin)
# ---------- RIGHT: three 1-unit segments (reverse of left) ----------
# Start the first right segment at the end of the sine.
x_r1_start <- x_sin_end
y_r1_start <- tail(seg_sin$y, 1)
segR1 <- build_linear(x_r1_start,           y_r1_start, m_steep_dn,  dx)
y_r1_end <- tail(segR1$y, 1)
segR2 <- build_linear(x_r1_start + 1,       y_r1_end,   m_gentle_dn, dx)
y_r2_end <- tail(segR2$y, 1)
segR3 <- build_linear(x_r1_start + 2,       y_r2_end,   m_flat_dn,   dx)
# ---------- Combine ----------
df <- bind_rows(seg1, seg2, seg3, gap, seg_sin, segR1, segR2, segR3)
# ---------- Plot ----------
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, na.rm = TRUE) +
geom_hline(yintercept = 0, linewidth = 0.3) +
geom_vline(xintercept = 0, linewidth = 0.3) +
labs(title = "Piecewise: Linear Blocks + Gap + One-Cycle Sine + Reverse Linear Blocks",
x = "x", y = "f(x)") +
theme_classic(base_size = 14)
# ------------------------------------------------------------
# Piecewise: 3 linear (flat, gentle up, steep up) -> gap -> 1-cycle sine ->
#            3 linear (steep down, moderate down, flat)
# Each linear segment is 1 unit wide; the gap is 1 unit wide.
# ------------------------------------------------------------
library(ggplot2)
library(dplyr)
# ---------- Parameters ----------
x0        <- -6          # starting x for the first left segment
y0        <- 0.2         # starting y (baseline)
m_flat    <- 0.00        # left-1 slope (flat)
m_gentle  <- 0.40        # left-2 slope (gentle up)
m_steep   <- 1.20        # left-3 slope (steep up)
gap_w     <- 1.0         # width of the gap
sin_w     <- 4.0         # width (in x) for exactly ONE sine cycle (0..2π)
A         <- 1.0         # sine amplitude
vshift    <- 1.0         # vertical shift for the sine
# Right side slopes (reverse order)
m_steep_dn <- -1.20
m_gentle_dn<- -0.40
m_flat_dn  <-  0.00
dx <- 0.01               # resolution for plotting
# ---------- Helper to build a straight segment 1 unit wide ----------
build_linear <- function(x_start, y_start, slope, dx = 0.01) {
xs <- seq(x_start, x_start + 1, by = dx)
ys <- y_start + slope * (xs - x_start)
tibble(x = xs, y = ys)
}
# ---------- LEFT: three 1-unit segments ----------
seg1 <- build_linear(x0,            y0,                   m_flat,   dx)
y1_end <- tail(seg1$y, 1)
seg2 <- build_linear(x0 + 1,        y1_end,               m_gentle, dx)
y2_end <- tail(seg2$y, 1)
seg3 <- build_linear(x0 + 2,        y2_end,               m_steep,  dx)
y3_end <- tail(seg3$y, 1)
# ---------- GAP ----------
gap_x <- seq(x0 + 3, x0 + 3 + gap_w, by = dx)
gap   <- tibble(x = gap_x, y = NA_real_)
# ---------- SINE ----------
x_sin_start <- x0 + 3 + gap_w
x_sin_end   <- x_sin_start + sin_w
xs_sin <- seq(x_sin_start, x_sin_end, by = dx)
theta  <- 2*pi * (xs_sin - x_sin_start) / sin_w
ys_sin <- vshift + A * sin(theta)
seg_sin <- tibble(x = xs_sin, y = ys_sin)
# ---------- RIGHT: reverse of left ----------
x_r1_start <- x_sin_end
y_r1_start <- tail(seg_sin$y, 1)
segR1 <- build_linear(x_r1_start,           y_r1_start, m_steep_dn,  dx)
y_r1_end <- tail(segR1$y, 1)
segR2 <- build_linear(x_r1_start + 1,       y_r1_end,   m_gentle_dn, dx)
y_r2_end <- tail(segR2$y, 1)
segR3 <- build_linear(x_r1_start + 2,       y_r2_end,   m_flat_dn,   dx)
# ---------- Combine ----------
df <- bind_rows(seg1, seg2, seg3, gap, seg_sin, segR1, segR2, segR3)
# ---------- Plot ----------
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, na.rm = TRUE) +
geom_hline(yintercept = 0, linewidth = 0.3, color = "gray60") +
geom_vline(xintercept = 0, linewidth = 0.3, color = "gray60") +
labs(x = "x", y = "f(x)") +
theme_classic(base_size = 14) +
theme(
panel.grid.major = element_line(color = "gray80", linewidth = 0.4),
panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
panel.grid.major.x = element_line(color = "gray85"),
panel.grid.major.y = element_line(color = "gray85"),
panel.background = element_blank()
)
# ------------------------------------------------------------
# Piecewise: 3 linear (flat, gentle up, steep up) -> gap -> 1-cycle sine ->
#            3 linear (steep down, moderate down, flat)
# Each linear segment is 1 unit wide; the gap is 1 unit wide.
# Added: open circle (hole) at x = 0
# Grid lines placed every 1 unit.
# ------------------------------------------------------------
library(ggplot2)
library(dplyr)
# ---------- Parameters ----------
x0        <- -6          # starting x for the first left segment
y0        <- 0.2         # starting y (baseline)
m_flat    <- 0.00        # left-1 slope (flat)
m_gentle  <- 0.40        # left-2 slope (gentle up)
m_steep   <- 1.20        # left-3 slope (steep up)
gap_w     <- 1.0         # width of the gap
sin_w     <- 4.0         # width (in x) for exactly ONE sine cycle (0..2π)
A         <- 1.0         # sine amplitude
vshift    <- 1.0         # vertical shift for the sine
# Right side slopes (reverse order)
m_steep_dn <- -1.20
m_gentle_dn<- -0.40
m_flat_dn  <-  0.00
dx <- 0.01               # resolution for plotting
# ---------- Helper to build a straight segment 1 unit wide ----------
build_linear <- function(x_start, y_start, slope, dx = 0.01) {
xs <- seq(x_start, x_start + 1, by = dx)
ys <- y_start + slope * (xs - x_start)
tibble(x = xs, y = ys)
}
# ---------- LEFT: three 1-unit segments ----------
seg1 <- build_linear(x0,            y0,                   m_flat,   dx)
y1_end <- tail(seg1$y, 1)
seg2 <- build_linear(x0 + 1,        y1_end,               m_gentle, dx)
y2_end <- tail(seg2$y, 1)
seg3 <- build_linear(x0 + 2,        y2_end,               m_steep,  dx)
y3_end <- tail(seg3$y, 1)
# ---------- GAP ----------
gap_x <- seq(x0 + 3, x0 + 3 + gap_w, by = dx)
gap   <- tibble(x = gap_x, y = NA_real_)
# ---------- SINE ----------
x_sin_start <- x0 + 3 + gap_w
x_sin_end   <- x_sin_start + sin_w
xs_sin <- seq(x_sin_start, x_sin_end, by = dx)
theta  <- 2*pi * (xs_sin - x_sin_start) / sin_w
ys_sin <- vshift + A * sin(theta)
seg_sin <- tibble(x = xs_sin, y = ys_sin)
# ---------- RIGHT: reverse of left ----------
x_r1_start <- x_sin_end
y_r1_start <- tail(seg_sin$y, 1)
segR1 <- build_linear(x_r1_start,           y_r1_start, m_steep_dn,  dx)
y_r1_end <- tail(segR1$y, 1)
segR2 <- build_linear(x_r1_start + 1,       y_r1_end,   m_gentle_dn, dx)
y_r2_end <- tail(segR2$y, 1)
segR3 <- build_linear(x_r1_start + 2,       y_r2_end,   m_flat_dn,   dx)
# ---------- Combine ----------
df <- bind_rows(seg1, seg2, seg3, gap, seg_sin, segR1, segR2, segR3)
# ---------- Find y-value at x = 0 ----------
hole_y <- approx(df$x, df$y, xout = 0)$y
hole_df <- tibble(x = 0, y = hole_y)
# ---------- Plot ----------
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, na.rm = TRUE) +
geom_point(data = hole_df, aes(x, y),
shape = 21, size = 3.5, fill = "white", color = "black", stroke = 1.1) +
geom_hline(yintercept = 0, linewidth = 0.3, color = "gray60") +
geom_vline(xintercept = 0, linewidth = 0.3, color = "gray60") +
scale_x_continuous(breaks = seq(floor(min(df$x)), ceiling(max(df$x)), by = 1)) +
scale_y_continuous(breaks = seq(floor(min(df$y, na.rm = TRUE)),
ceiling(max(df$y, na.rm = TRUE)), by = 1)) +
labs(x = "x", y = "f(x)") +
theme_classic(base_size = 14) +
theme(
panel.grid.major = element_line(color = "gray85", linewidth = 0.4),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
# ------------------------------------------------------------
# Piecewise: 3 linear (flat, gentle up, steep up) -> gap -> 1-cycle sine ->
#            3 linear (steep down, moderate down, flat)
# Each linear segment is 1 unit wide; the gap is 1 unit wide.
# Added: open circle (hole) at x = 0
# Grid lines placed every 1 unit.
# ------------------------------------------------------------
library(ggplot2)
library(dplyr)
# ---------- Parameters ----------
x0        <- -6          # starting x for the first left segment
y0        <- 0.2         # starting y (baseline)
m_flat    <- 0.00        # left-1 slope (flat)
m_gentle  <- 0.40        # left-2 slope (gentle up)
m_steep   <- 1.20        # left-3 slope (steep up)
gap_w     <- 1.0         # width of the gap
sin_w     <- 4.0         # width (in x) for exactly ONE sine cycle (0..2π)
A         <- 1.0         # sine amplitude
vshift    <- 1.0         # vertical shift for the sine
# Right side slopes (reverse order)
m_steep_dn <- -1.20
m_gentle_dn<- -0.40
m_flat_dn  <-  0.00
dx <- 0.01               # resolution for plotting
# ---------- Helper to build a straight segment 1 unit wide ----------
build_linear <- function(x_start, y_start, slope, dx = 0.01) {
xs <- seq(x_start, x_start + 1, by = dx)
ys <- y_start + slope * (xs - x_start)
tibble(x = xs, y = ys)
}
# ---------- LEFT: three 1-unit segments ----------
seg1 <- build_linear(x0,            y0,                   m_flat,   dx)
y1_end <- tail(seg1$y, 1)
seg2 <- build_linear(x0 + 1,        y1_end,               m_gentle, dx)
y2_end <- tail(seg2$y, 1)
seg3 <- build_linear(x0 + 2,        y2_end,               m_steep,  dx)
y3_end <- tail(seg3$y, 1)
# ---------- GAP ----------
gap_x <- seq(x0 + 3, x0 + 3 + gap_w, by = dx)
gap   <- tibble(x = gap_x, y = NA_real_)
# ---------- SINE ----------
x_sin_start <- x0 + 3 + gap_w
x_sin_end   <- x_sin_start + sin_w
xs_sin <- seq(x_sin_start, x_sin_end, by = dx)
theta  <- 2*pi * (xs_sin - x_sin_start) / sin_w
ys_sin <- vshift + A * sin(theta)
seg_sin <- tibble(x = xs_sin, y = ys_sin)
# ---------- RIGHT: reverse of left ----------
x_r1_start <- x_sin_end
y_r1_start <- tail(seg_sin$y, 1)
segR1 <- build_linear(x_r1_start,           y_r1_start, m_steep_dn,  dx)
y_r1_end <- tail(segR1$y, 1)
segR2 <- build_linear(x_r1_start + 1,       y_r1_end,   m_gentle_dn, dx)
y_r2_end <- tail(segR2$y, 1)
segR3 <- build_linear(x_r1_start + 2,       y_r2_end,   m_flat_dn,   dx)
# ---------- Combine ----------
df <- bind_rows(seg1, seg2, seg3, gap, seg_sin, segR1, segR2, segR3)
# ---------- Find y-value at x = 0 ----------
hole_y <- approx(df$x, df$y, xout = 0)$y
hole_df <- tibble(x = 0, y = hole_y)
# ---------- Plot ----------
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, na.rm = TRUE) +
geom_point(data = hole_df, aes(x, y),
shape = 21, size = 3.5, fill = "white", color = "black", stroke = 1.1) +
geom_hline(yintercept = 0, linewidth = 0.3, color = "gray60") +
geom_vline(xintercept = 0, linewidth = 0.3, color = "gray60") +
scale_x_continuous(breaks = seq(floor(min(df$x)), ceiling(max(df$x)), by = 1)) +
scale_y_continuous(breaks = seq(floor(min(df$y, na.rm = TRUE)),
ceiling(max(df$y, na.rm = TRUE)), by = 1)) +
labs(x = "x", y = "f(x)") +
theme_classic(base_size = 14) +
theme(
panel.grid.major = element_line(color = "gray85", linewidth = 0.4),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
# ------------------------------------------------------------
# Blank axis with same horizontal range and 1-unit grid lines
# Matches the previous piecewise function plot
# ------------------------------------------------------------
# Use same x-range from previous function
x0 <- -6
gap_w <- 1
sin_w <- 4
x_end <- (x0 + 3 + gap_w + sin_w + 3)  # 3 right-side segments (1 unit each)
# Create a blank dataframe just for the range
df_blank <- tibble(x = seq(x0, x_end, by = 0.1), y = 0)
# Plot a blank coordinate system
ggplot(df_blank, aes(x, y)) +
geom_blank() +   # ensures ggplot recognizes range
geom_hline(yintercept = 0, linewidth = 0.3, color = "gray60") +
geom_vline(xintercept = 0, linewidth = 0.3, color = "gray60") +
scale_x_continuous(breaks = seq(floor(x0), ceiling(x_end), by = 1)) +
scale_y_continuous(breaks = seq(-3, 4, by = 1)) +  # adjustable y-range
labs(x = "x", y = "f'(x)") +
theme_classic(base_size = 14) +
theme(
panel.grid.major = element_line(color = "gray85", linewidth = 0.4),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
# ------------------------------------------------------------
# Piecewise: 3 linear (flat, gentle up, steep up) -> gap -> 1-cycle sine ->
#            3 linear (steep down, moderate down, flat)
# Each linear segment is 1 unit wide; the gap is 1 unit wide.
# Added: open circle (hole) at x = 0
# Grid lines placed every 1 unit.
# ------------------------------------------------------------
library(ggplot2)
library(dplyr)
# ---------- Parameters ----------
x0        <- -6          # starting x for the first left segment
y0        <- 0.2         # starting y (baseline)
m_flat    <- 0.00        # left-1 slope (flat)
m_gentle  <- 0.40        # left-2 slope (gentle up)
m_steep   <- 1.20        # left-3 slope (steep up)
gap_w     <- 1.0         # width of the gap
sin_w     <- 4.0         # width (in x) for exactly ONE sine cycle (0..2π)
A         <- 1.0         # sine amplitude
vshift    <- 1.0         # vertical shift for the sine
# Right side slopes (reverse order)
m_steep_dn <- -1.20
m_gentle_dn<- -0.40
m_flat_dn  <-  0.00
dx <- 0.01               # resolution for plotting
# ---------- Helper to build a straight segment 1 unit wide ----------
build_linear <- function(x_start, y_start, slope, dx = 0.01) {
xs <- seq(x_start, x_start + 1, by = dx)
ys <- y_start + slope * (xs - x_start)
tibble(x = xs, y = ys)
}
# ---------- LEFT: three 1-unit segments ----------
seg1 <- build_linear(x0,            y0,                   m_flat,   dx)
y1_end <- tail(seg1$y, 1)
seg2 <- build_linear(x0 + 1,        y1_end,               m_gentle, dx)
y2_end <- tail(seg2$y, 1)
seg3 <- build_linear(x0 + 2,        y2_end,               m_steep,  dx)
y3_end <- tail(seg3$y, 1)
# ---------- GAP ----------
gap_x <- seq(x0 + 3, x0 + 3 + gap_w, by = dx)
gap   <- tibble(x = gap_x, y = NA_real_)
# ---------- SINE ----------
x_sin_start <- x0 + 3 + gap_w
x_sin_end   <- x_sin_start + sin_w
xs_sin <- seq(x_sin_start, x_sin_end, by = dx)
theta  <- 2*pi * (xs_sin - x_sin_start) / sin_w
ys_sin <- vshift + A * sin(theta)
seg_sin <- tibble(x = xs_sin, y = ys_sin)
# ---------- RIGHT: reverse of left ----------
x_r1_start <- x_sin_end
y_r1_start <- tail(seg_sin$y, 1)
segR1 <- build_linear(x_r1_start,           y_r1_start, m_steep_dn,  dx)
y_r1_end <- tail(segR1$y, 1)
segR2 <- build_linear(x_r1_start + 1,       y_r1_end,   m_gentle_dn, dx)
y_r2_end <- tail(segR2$y, 1)
segR3 <- build_linear(x_r1_start + 2,       y_r2_end,   m_flat_dn,   dx)
# ---------- Combine ----------
df <- bind_rows(seg1, seg2, seg3, gap, seg_sin, segR1, segR2, segR3)
# ---------- Find y-value at x = 0 ----------
hole_y <- approx(df$x, df$y, xout = 0)$y
hole_df <- tibble(x = 0, y = hole_y)
# ---------- Plot ----------
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, na.rm = TRUE) +
geom_point(data = hole_df, aes(x, y),
shape = 21, size = 3.5, fill = "white", color = "black", stroke = 1.1) +
geom_hline(yintercept = 0, linewidth = 0.3, color = "gray60") +
geom_vline(xintercept = 0, linewidth = 0.3, color = "gray60") +
scale_x_continuous(breaks = seq(floor(min(df$x)), ceiling(max(df$x)), by = 1)) +
scale_y_continuous(breaks = seq(floor(min(df$y, na.rm = TRUE)),
ceiling(max(df$y, na.rm = TRUE)), by = 1)) +
labs(x = "x", y = "f(x)") +
theme_classic(base_size = 14) +
theme(
panel.grid.major = element_line(color = "gray85", linewidth = 0.4),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
# ------------------------------------------------------------
# Blank axis with same horizontal range and 1-unit grid lines
# Matches the previous piecewise function plot
# ------------------------------------------------------------
# Use same x-range from previous function
x0 <- -6
gap_w <- 1
sin_w <- 4
x_end <- (x0 + 3 + gap_w + sin_w + 3)  # 3 right-side segments (1 unit each)
# Create a blank dataframe just for the range
df_blank <- tibble(x = seq(x0, x_end, by = 0.1), y = 0)
# Plot a blank coordinate system
ggplot(df_blank, aes(x, y)) +
geom_blank() +   # ensures ggplot recognizes range
geom_hline(yintercept = 0, linewidth = 0.3, color = "gray60") +
geom_vline(xintercept = 0, linewidth = 0.3, color = "gray60") +
scale_x_continuous(breaks = seq(floor(x0), ceiling(x_end), by = 1)) +
scale_y_continuous(breaks = seq(-3, 4, by = 1)) +  # adjustable y-range
labs(x = "x", y = "f'(x)") +
theme_classic(base_size = 14) +
theme(
panel.grid.major = element_line(color = "gray85", linewidth = 0.4),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
