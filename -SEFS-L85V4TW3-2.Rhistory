source("C:/Users/gajs/OneDrive - UW/UW/Courses/497 - Simulation/Textbook_Project/bookdown_497_simulation/Models/black_jack.R", echo=TRUE)
runApp('sea_tac.R')
runApp('black_jack.R')
runApp('black_jack.R')
runApp('black_jack.R')
runApp('sea_tac.R')
runApp('sea_tac.R')
runApp('sea_tac.R')
runApp('black_jack.R')
runApp('sea_tac.R')
runApp('sea_tac.R')
runApp('sea_tac.R')
runApp('sea_tac.R')
setwd("C:/Users/gajs/OneDrive - UW/UW/Courses/497 - Simulation/Textbook_Project/bookdown_497_simulation")
runApp('Models/sea_tac.R')
setwd("C:/Users/gajs/OneDrive - UW/UW/Courses/497 - Simulation/Textbook_Project/bookdown_497_simulation/Models")
runApp('sea_tac.R')
runApp('sea_tac.R')
runApp('sea_tac.R')
getwd()
DATA_PATH <- "data/seatac_data.csv"
stopifnot(file.exists(DATA_PATH))
raw <- read_csv(DATA_PATH, show_col_types = FALSE)
data <- raw |>
select(DATE, PRCP) |>
mutate(
DATE = as_date(DATE),
PRCP = suppressWarnings(as.numeric(PRCP))
) |>
filter(!is.na(DATE)) |>
arrange(DATE)
date_min <- min(data$DATE, na.rm = TRUE)
date_max <- max(data$DATE, na.rm = TRUE)
runApp('sea_tac.R')
runApp('sea_tac.R')
runApp('sea_tac.R')
runApp('sea_tac.R')
setwd("C:/Users/gajs/OneDrive - UW/UW/Courses/497 - Simulation/Textbook_Project/bookdown_497_simulation/Models")
runApp('sea_tac.R')
setwd("C:/Users/gajs/OneDrive - UW/UW/Courses/497 - Simulation/Textbook_Project/bookdown_497_simulation")
source("_publish_modeling2.R")
source("_publish_modeling2.R")
setwd("C:/Users/gajs/OneDrive - UW/UW/Courses/497 - Simulation/Textbook_Project/bookdown_497_simulation/Models")
runApp('black_jack.R')
runApp('sea_tac.R')
runApp('sea_tac.R')
getwd()
getwd()
setwd("C:/Users/gajs/OneDrive - UW/UW/Courses/QSci 291/Textbook_Project/bookdown-demo-main")
# Visualize f(x) = x^2 + x and its derivative f'(x) = 2x + 1
# Alongside the component functions f1(x)=x^2 and g(x)=x
# ----- Setup functions -----
f1 <- function(x) x^2         # component 1
g  <- function(x) x           # component 2
f  <- function(x) f1(x) + g(x) # sum
fp <- function(x) 2*x + 1     # derivative
# ----- Domain and values -----
x <- seq(-4, 4, length.out = 600)
y_f1 <- f1(x)
y_g  <- g(x)
y_f  <- f(x)
y_fp <- fp(x)
# ----- Plotting -----
op <- par(mfrow = c(2,1), mar = c(4,4,2,1))
# (1) Function view: components and their sum
plot(x, y_f, type = "l", lwd = 3, col = "steelblue",
xlab = "x", ylab = "y",
main = "f(x) = x^2 + x and its Components")
grid()
lines(x, y_f1, lwd = 2, col = "darkorange")
lines(x, y_g,  lwd = 2, col = "seagreen")
abline(h = 0, v = 0, col = "gray70", lty = 2)
legend("topleft",
legend = c("f(x) = x^2 + x", "x^2", "x"),
col = c("steelblue", "darkorange", "seagreen"),
lwd = c(3,2,2), bty = "n")
# Optional: mark a few points to compare slopes visually
x_pts <- c(-3, 0, 2)
points(x_pts, f(x_pts), pch = 19, col = "steelblue")
# (2) Derivative view
plot(x, y_fp, type = "l", lwd = 3, col = "firebrick",
xlab = "x", ylab = "f'(x)",
main = "Derivative: f'(x) = 2x + 1")
grid()
abline(h = 0, v = 0, col = "gray70", lty = 2)
# Optional: show slope values at the same x-points
points(x_pts, fp(x_pts), pch = 19, col = "firebrick")
text(x_pts, fp(x_pts),
labels = paste0("slope=", fp(x_pts)),
pos = 3, cex = 0.8, col = "firebrick")
par(op)
# Visualize f(x) = x^2 + x and its derivative f'(x) = 2x + 1
# Alongside the component functions f1(x)=x^2 and g(x)=x
# ----- Setup functions -----
f1 <- function(x) x^2         # component 1
g  <- function(x) x           # component 2
f  <- function(x) f1(x) + g(x) # sum
fp <- function(x) 2*x + 1     # derivative
# ----- Domain and values -----
x <- seq(-4, 4, length.out = 600)
y_f1 <- f1(x)
y_g  <- g(x)
y_f  <- f(x)
y_fp <- fp(x)
# ----- Plotting -----
op <- par(mfrow = c(2,1), mar = c(4,4,2,1))
# (1) Function view: components and their sum
plot(x, y_f, type = "l", lwd = 3, col = "steelblue",
xlab = "x", ylab = "y",
main = "f(x) = x^2 + x and its Components")
grid()
lines(x, y_f1, lwd = 2, col = "darkorange")
lines(x, y_g,  lwd = 2, col = "seagreen")
abline(h = 0, v = 0, col = "gray70", lty = 2)
legend("topleft",
legend = c("f(x) = x^2 + x", "x^2", "x"),
col = c("steelblue", "darkorange", "seagreen"),
lwd = c(3,2,2), bty = "n")
# Optional: mark a few points to compare slopes visually
x_pts <- c(-3, 0, 2)
points(x_pts, f(x_pts), pch = 19, col = "steelblue")
# (2) Derivative view
plot(x, y_fp, type = "l", lwd = 3, col = "firebrick",
xlab = "x", ylab = "f'(x)",
main = "Derivative: f'(x) = 2x + 1")
grid()
abline(h = 0, v = 0, col = "gray70", lty = 2)
# Optional: show slope values at the same x-points
points(x_pts, fp(x_pts), pch = 19, col = "firebrick")
text(x_pts, fp(x_pts),
labels = paste0("slope=", fp(x_pts)),
pos = 3, cex = 0.8, col = "firebrick")
par(op)
# Visualize f(x) = x^2 + x and its derivatives
# Show component functions, their derivatives, and the sum
# ----- Define functions -----
f1 <- function(x) x^2         # component 1
g  <- function(x) x           # component 2
f  <- function(x) f1(x) + g(x) # sum
# Derivatives
f1p <- function(x) 2*x
gp  <- function(x) 1
fp  <- function(x) f1p(x) + gp(x)  # derivative of the sum
# ----- Domain and values -----
x <- seq(-4, 4, length.out = 600)
y_f1  <- f1(x)
y_g   <- g(x)
y_f   <- f(x)
y_f1p <- f1p(x)
y_gp  <- gp(x)
y_fp  <- fp(x)
# ----- Plotting -----
op <- par(mfrow = c(2,1), mar = c(4,4,2,1))
# (1) Function view: components and their sum
plot(x, y_f, type = "l", lwd = 3, col = "steelblue",
xlab = "x", ylab = "y",
main = "Functions: f(x) = x^2 + x and Its Components")
grid()
lines(x, y_f1, lwd = 2, col = "darkorange")
lines(x, y_g,  lwd = 2, col = "seagreen")
abline(h = 0, v = 0, col = "gray70", lty = 2)
legend("topleft",
legend = c("f(x) = x^2 + x", "x^2", "x"),
col = c("steelblue", "darkorange", "seagreen"),
lwd = c(3,2,2), bty = "n")
# (2) Derivative view: derivatives of each and their sum
plot(x, y_fp, type = "l", lwd = 3, col = "steelblue",
xlab = "x", ylab = "f'(x)",
main = "Derivatives: f'(x) = 2x + 1 and Its Components")
grid()
lines(x, y_f1p, lwd = 2, col = "darkorange")
lines(x, y_gp,  lwd = 2, col = "seagreen")
# Visualize f(x) = x^2 + x and its derivatives
# Show component functions, their derivatives, and the sum
# ----- Define functions -----
f1 <- function(x) x^2                  # component 1
g  <- function(x) x                    # component 2
f  <- function(x) f1(x) + g(x)         # sum
# Derivatives (vectorized)
f1p <- function(x) 2 * x
gp  <- function(x) rep(1, length(x))   # <- ensure same length as x
fp  <- function(x) f1p(x) + gp(x)      # derivative of the sum
# ----- Domain and values -----
x <- seq(-4, 4, length.out = 600)
y_f1  <- f1(x)
y_g   <- g(x)
y_f   <- f(x)
y_f1p <- f1p(x)
y_gp  <- gp(x)
y_fp  <- fp(x)
# ----- Plotting -----
op <- par(mfrow = c(2,1), mar = c(4,4,2,1))
# (1) Function view: components and their sum
plot(x, y_f, type = "l", lwd = 3, col = "steelblue",
xlab = "x", ylab = "y",
main = "Functions: f(x) = x^2 + x and Its Components")
grid()
lines(x, y_f1, lwd = 2, col = "darkorange")
lines(x, y_g,  lwd = 2, col = "seagreen")
abline(h = 0, v = 0, col = "gray70", lty = 2)
legend("topleft",
legend = c("f(x) = x^2 + x", "x^2", "x"),
col = c("steelblue", "darkorange", "seagreen"),
lwd = c(3,2,2), bty = "n")
# (2) Derivative view: derivatives of each and their sum
plot(x, y_fp, type = "l", lwd = 3, col = "steelblue",
xlab = "x", ylab = "derivative",
main = "Derivatives: f'(x) = 2x + 1 and Its Components")
grid()
lines(x, y_f1p, lwd = 2, col = "darkorange")
lines(x, y_gp,  lwd = 2, col = "seagreen")
abline(h = 0, v = 0, col = "gray70", lty = 2)
legend("topleft",
legend = c("f'(x) = 2x + 1", "(x^2)' = 2x", "(x)' = 1"),
col = c("steelblue", "darkorange", "seagreen"),
lwd = c(3,2,2), bty = "n")
par(op)
# Clean, proportional plots with equal (1:1) xâ€“y units and no warp
# ----- Functions -----
f1 <- function(x) x^2
g  <- function(x) x
f  <- function(x) f1(x) + g(x)
# Derivatives
f1p <- function(x) 2 * x
gp  <- function(x) rep(1, length(x))
fp  <- function(x) f1p(x) + gp(x)
# ----- Helper to get xlim that makes units equal given ylim & panel size -----
equal_xlim <- function(ylim) {
# pin: c(width, height) of current plot region in inches
pin <- par("pin")
# span in x that keeps 1 unit in x = 1 unit in y for this panel
xspan <- diff(ylim) * (pin[1] / pin[2])
c(-xspan/2, xspan/2)
}
# ----- Plotting -----
op <- par(mfrow = c(2,1), mar = c(4,4,2,1), cex = 1.15)
### TOP: functions
ylim_top <- c(-16, 16)           # shows x^2 clearly and keeps line x visible
plot.new();                       # allocate panel so pin is correct
par(new = TRUE)
xlim_top <- equal_xlim(ylim_top)  # compute balanced x range for this panel
x_top <- seq(xlim_top[1], xlim_top[2], length.out = 800)
plot(x_top, f(x_top), type = "l", lwd = 3, col = "steelblue",
xlab = "x", ylab = "y",
xlim = xlim_top, ylim = ylim_top,
main = "Functions: f(x) = x^2 + x and Its Components")
grid()
lines(x_top, f1(x_top), lwd = 2, col = "darkorange")
lines(x_top, g(x_top),  lwd = 2, col = "seagreen")
abline(h = 0, v = 0, col = "gray70", lty = 2)
legend("topleft",
legend = c("f(x) = x^2 + x", "x^2", "x"),
col = c("steelblue", "darkorange", "seagreen"),
lwd = c(3,2,2), bty = "n")
### BOTTOM: derivatives
ylim_bot <- c(-8, 8)
plot.new()
par(new = TRUE)
xlim_bot <- equal_xlim(ylim_bot)
x_bot <- seq(xlim_bot[1], xlim_bot[2], length.out = 800)
plot(x_bot, fp(x_bot), type = "l", lwd = 3, col = "steelblue",
xlab = "x", ylab = "f'(x)",
xlim = xlim_bot, ylim = ylim_bot,
main = "Derivatives: f'(x) = 2x + 1 and Its Components")
grid()
lines(x_bot, f1p(x_bot), lwd = 2, col = "darkorange")
lines(x_bot, gp(x_bot),  lwd = 2, col = "seagreen")
abline(h = 0, v = 0, col = "gray70", lty = 2)
legend("topleft",
legend = c("f'(x) = 2x + 1", "(x^2)' = 2x", "(x)' = 1"),
col = c("steelblue", "darkorange", "seagreen"),
lwd = c(3,2,2), bty = "n")
par(op)
# Clean, proportional plots for f(x) = x^2 + x and f'(x) = 2x + 1
# x-axis from -5 to 5; square-looking panels; clear component comparison
# ----- Functions -----
f1 <- function(x) x^2
g  <- function(x) x
f  <- function(x) f1(x) + g(x)
# Derivatives
f1p <- function(x) 2 * x
gp  <- function(x) rep(1, length(x))
fp  <- function(x) f1p(x) + gp(x)
# ----- Domain -----
x <- seq(-5, 5, length.out = 800)
y_f1  <- f1(x)
y_g   <- g(x)
y_f   <- f(x)
y_f1p <- f1p(x)
y_gp  <- gp(x)
y_fp  <- fp(x)
# ----- Plotting -----
op <- par(mfrow = c(2,1), mar = c(4,4,2,1), cex = 1.2)
# (1) Function view
plot(x, y_f, type = "l", lwd = 3, col = "steelblue",
xlab = "x", ylab = "y",
xlim = c(-5, 5), ylim = c(-10, 30),
main = "Functions: f(x) = x^2 + x and Its Components")
grid()
lines(x, y_f1, lwd = 2, col = "darkorange")
lines(x, y_g,  lwd = 2, col = "seagreen")
abline(h = 0, v = 0, col = "gray70", lty = 2)
legend("topleft",
legend = c("f(x) = x^2 + x", "x^2", "x"),
col = c("steelblue", "darkorange", "seagreen"),
lwd = c(3,2,2), bty = "n")
# (2) Derivative view
plot(x, y_fp, type = "l", lwd = 3, col = "steelblue",
xlab = "x", ylab = "f'(x)",
xlim = c(-5, 5), ylim = c(-10, 10),
main = "Derivatives: f'(x) = 2x + 1 and Its Components")
grid()
lines(x, y_f1p, lwd = 2, col = "darkorange")
lines(x, y_gp,  lwd = 2, col = "seagreen")
abline(h = 0, v = 0, col = "gray70", lty = 2)
legend("topleft",
legend = c("f'(x) = 2x + 1", "(x^2)' = 2x", "(x)' = 1"),
col = c("steelblue", "darkorange", "seagreen"),
lwd = c(3,2,2), bty = "n")
par(op)
# Clean, proportional plots for f(x) = x^2 + x and f'(x) = 2x + 1
# x-axis from -5 to 5; square-looking panels; clear component comparison
# ----- Functions -----
f1 <- function(x) x^2
g  <- function(x) x
f  <- function(x) f1(x) + g(x)
# Derivatives
f1p <- function(x) 2 * x
gp  <- function(x) rep(1, length(x))
fp  <- function(x) f1p(x) + gp(x)
# ----- Domain -----
x <- seq(-5, 5, length.out = 800)
y_f1  <- f1(x)
y_g   <- g(x)
y_f   <- f(x)
y_f1p <- f1p(x)
y_gp  <- gp(x)
y_fp  <- fp(x)
# ----- Plotting -----
op <- par(mfrow = c(2,1), mar = c(4,4,2,1), cex = 1.2)
# (1) Function view
plot(x, y_f, type = "l", lwd = 3, col = "steelblue",
xlab = "x", ylab = "y",
xlim = c(-5, 5), ylim = c(-10, 30),
main = "Functions: f(x) = x^2 + x and Its Components")
grid()
lines(x, y_f1, lwd = 2, col = "darkorange")
lines(x, y_g,  lwd = 2, col = "seagreen")
abline(h = 0, v = 0, col = "gray70", lty = 2)
legend("topleft",
legend = c("f(x) = x^2 + x", "x^2", "x"),
col = c("steelblue", "darkorange", "seagreen"),
lwd = c(3,2,2), bty = "n")
# (2) Derivative view
plot(x, y_fp, type = "l", lwd = 3, col = "steelblue",
xlab = "x", ylab = "f'(x)",
xlim = c(-5, 5), ylim = c(-10, 10),
main = "Derivatives: f'(x) = 2x + 1 and Its Components")
grid()
lines(x, y_f1p, lwd = 2, col = "darkorange")
lines(x, y_gp,  lwd = 2, col = "seagreen")
abline(h = 0, v = 0, col = "gray70", lty = 2)
legend("topleft",
legend = c("f'(x) = 2x + 1", "(x^2)' = 2x", "(x)' = 1"),
col = c("steelblue", "darkorange", "seagreen"),
lwd = c(3,2,2), bty = "n")
par(op)
getwd()
source("_publish_calculus.R")
setwd("C:/Users/gajs/OneDrive - UW/UW/Courses/QSci 291/Textbook_Project/Homework")
# ===========================================
# Plot of f(x) = 4*tan(x) + x^2
# ===========================================
library(ggplot2)
# Define the function
f <- function(x) 4 * tan(x) + x^2
# Create a sequence of x values (in radians)
# Avoid asymptotes where tan(x) is undefined
x <- seq(-pi/2 + 0.1, pi/2 - 0.1, length.out = 400)
# Compute y values
y <- f(x)
# Build data frame
df <- data.frame(x = x, y = y)
# Plot
ggplot(df, aes(x, y)) +
geom_line(color = "steelblue", linewidth = 1.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(
title = expression(f(x) == 4 * tan(x) + x^2),
x = "x (radians)",
y = "f(x)"
) +
theme_minimal(base_size = 14)
# ===========================================
# Plot of f(x) = 4*tan(x) + x^2
# ===========================================
library(ggplot2)
# Define the function
f <- function(x) 4 * tan(x) + x^2
# Create a sequence of x values (in radians)
# Avoid asymptotes where tan(x) is undefined
x <- seq(-pi/2-2*pi + 0.1, pi/2+2*pi - 0.1, length.out = 400)
# Compute y values
y <- f(x)
# Build data frame
df <- data.frame(x = x, y = y)
# Plot
ggplot(df, aes(x, y)) +
geom_line(color = "steelblue", linewidth = 1.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(
title = expression(f(x) == 4 * tan(x) + x^2),
x = "x (radians)",
y = "f(x)"
) +
theme_minimal(base_size = 14)
# ===========================================
# Plot of f(x) = 4*tan(x) + x^2
# ===========================================
library(ggplot2)
# Define the function
f <- function(x) 4 * tan(x) + x^2
# Create a sequence of x values (in radians)
# Avoid asymptotes where tan(x) is undefined
x <- seq(-pi/2-pi + 0.1, pi/2+pi - 0.1, length.out = 1000)
# Compute y values
y <- f(x)
# Build data frame
df <- data.frame(x = x, y = y)
# Plot
ggplot(df, aes(x, y)) +
geom_line(color = "steelblue", linewidth = 1.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(
title = expression(f(x) == 4 * tan(x) + x^2),
x = "x (radians)",
y = "f(x)"
) +
theme_minimal(base_size = 14)
# ===========================================
# Plot of f(x) = 4*tan(x) + x^2
# ===========================================
library(ggplot2)
# Define the function
f <- function(x) 4 * tan(x) + x^2
# Create a sequence of x values (in radians)
# Avoid asymptotes where tan(x) is undefined
x <- seq(-pi/2-pi + 0.1, pi/2+pi - 0.1, length.out = 10000)
# Compute y values
y <- f(x)
# Build data frame
df <- data.frame(x = x, y = y)
# Plot
ggplot(df, aes(x, y)) +
geom_line(color = "steelblue", linewidth = 1.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(
title = expression(f(x) == 4 * tan(x) + x^2),
x = "x (radians)",
y = "f(x)"
) +
theme_minimal(base_size = 14)
# ===========================================
# Plot of f(x) = 4*tan(x) + x^2
# Showing 3 cycles with vertical asymptotes
# ===========================================
library(ggplot2)
library(dplyr)
# Define the function
f <- function(x) 4 * tan(x) + x^2
# Define x-range to cover ~3 cycles of tan(x)
# Tan has period pi, so weâ€™ll cover from -1.5*pi to +1.5*pi
x <- seq(-1.5*pi, 1.5*pi, length.out = 3000)
# Identify asymptotes (where cos(x) = 0)
asymptotes <- seq(-1.5*pi, 1.5*pi, by = pi/2)
# Filter out points too close to asymptotes
df <- data.frame(x = x) |>
mutate(
y = ifelse(abs(cos(x)) < 0.05, NA, f(x)),
group = cumsum(is.na(y))
)
# Base plot
p <- ggplot(df, aes(x, y, group = group)) +
geom_line(color = "steelblue", linewidth = 1.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
labs(
title = expression(f(x) == 4 * tan(x) + x^2),
x = "x (radians)",
y = "f(x)"
) +
theme_minimal(base_size = 14)
# Add vertical dotted asymptotes at discontinuities
for (a in asymptotes) {
p <- p + geom_vline(xintercept = a, linetype = "dotted", color = "firebrick", linewidth = 0.7)
}
p
### 11. \(f(x)=6\sin x-3\cos x+2\){-}
**Follow-up:** Find \(f'''(x)\) and \(f^{(4)}(x)\). What do you notice?
getwd()
source("_publish_calculus.R")
library(shiny); runApp('C:/Users/gajs/OneDrive - UW/UW/Courses/497 - Simulation/Textbook_Project/bookdown_497_simulation/Models/make_it_rain.R')
runApp('C:/Users/gajs/OneDrive - UW/UW/Courses/497 - Simulation/Textbook_Project/bookdown_497_simulation/Models/make_it_rain.R')
runApp('C:/Users/gajs/OneDrive - UW/UW/Courses/497 - Simulation/Textbook_Project/bookdown_497_simulation/Models/make_it_rain.R')
runApp('C:/Users/gajs/OneDrive - UW/UW/Courses/497 - Simulation/Textbook_Project/bookdown_497_simulation/Models/make_it_rain.R')
runApp('C:/Users/gajs/OneDrive - UW/UW/Courses/497 - Simulation/Textbook_Project/bookdown_497_simulation/Models/make_it_rain.R')
runApp('C:/Users/gajs/OneDrive - UW/UW/Courses/497 - Simulation/Textbook_Project/bookdown_497_simulation/Models/make_it_rain.R')
runApp('C:/Users/gajs/OneDrive - UW/UW/Courses/497 - Simulation/Textbook_Project/bookdown_497_simulation/Models/make_it_rain.R')
